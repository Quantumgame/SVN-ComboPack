function PlotNBN_TC_spikes(expdate, session, filenum, varargin)
% plots a spike-count tuning curve for bandwidth
%for narrow-band noise tuning curve data
%
% usage: PlotNBN_TC_spikes(expdate, session, filenum, [xlimits], [ylimits])
% (xlimits, ylimits is optional)
%xlimits determines the window for spikecounts, not the xlimits of the
%tuning curve plot (default is 0-200 ms window)
%
%looks for an outfile generated by PlotNBN_TC_psth
% mw 102210
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if nargin==0
    fprintf('\nno input');
    return;
elseif nargin==3
    ylimits=-1;
    xlimits=[0 200]; %spike count window
elseif nargin==4
    xlimits=varargin{1};
    if isempty(xlimits)
        xlimits=[0 200]; %spike count window
    end
    ylimits=-1;
elseif nargin==5
    xlimits=varargin{1};
    if isempty(xlimits)
        xlimits=[0 200]; %spike count window    end
    end
    ylimits=varargin{2};
    if isempty(ylimits) | length(ylimits)~=2
        ylimits=-1;
    end
else
    error('wrong number of arguments');
end

godatadir(expdate, session, filenum);
outfile=sprintf('outspikes%s-%s-%s.mat', expdate, session, filenum);
load(outfile)

M1=out.M1;
mM1=out.mM1;
freqs=out.freqs;
amps=out.amps;
bws=out.bws;
samprate=out.samprate;
numamps=length(amps);
numfreqs=length(freqs);
numbws=length(bws);
nreps=out.nreps;

%find CF from cell list
cells=cell_list_NBN;
CF=nan;
for i=1:length(cells)
    if strcmp(expdate, cells(i).expdate) & strcmp(session, cells(i).session)
        CF=cells(i).CF;
        break
    end
end


%not plotting an entire separate freq column for whitenoise, just plotting
%it as the "inf" bandwidth for each freq

%plot ch1
for aindex=[1:numamps]
    for bwindex=[1:numbws]
        for findex=2:numfreqs
            if bwindex==numbws %inf==wn
                findex=1;
            end
            spiketimes1=mM1(findex, aindex, bwindex).spiketimes;
            spikecount(findex, aindex, bwindex)=length(spiketimes1(spiketimes1>xlimits(1) & spiketimes1<xlimits(2)));
            spikecount(findex, aindex, bwindex)=spikecount(findex, aindex, bwindex)/nreps(findex, aindex, bwindex);
            %spikecount is divided by nreps to give mean spikecount
        end
    end

    %     copy WN (BW end)to all freq columns
    for findex=2:numfreqs
        spikecount(findex, :, numbws)=spikecount(1, :, numbws);
    end
    


    for findex=2:numfreqs       
         %reformat M1 into numbws x nreps for anova
        for bwindex=1:numbws-1
            for rep=1:nreps(findex, 1, bwindex)
                Man(rep, bwindex)=length(M1(findex, 1, bwindex, rep).spiketimes);
            end
        end
        bwindex=numbws;
        for rep=1:nreps(1, 1, bwindex)
            Man(rep, bwindex)=length(M1(1, 1, bwindex, rep).spiketimes);
        end
        P=anova1(Man, [], 'off');
        if P<.001 pstring='***';
        elseif P<.01 pstring='**';
        elseif P<.05 pstring='*';
        else pstring='';
        end
            cd   /Users/mikewehr/Documents/Analysis/NBNLib
            fid=fopen('sig-NBN-lca.txt', 'a');
            fprintf(fid, '\n%g',P);
            fclose(fid);
        figure
        set(gca, 'fontsize', 18)
        h=plot(1:numbws, squeeze(spikecount(findex, aindex,:)), 'm');
        set(h, 'linewidth', 2, 'marker', '.', 'markersize', 30)
        legend('spikecount')
        set(gca, 'xtick',1:numbws, 'xticklabel', bws)
        xlabel(sprintf('bandwidth, oct (carrier %.2fkHz, CF %.2fkHz)', 1e-3*freqs(findex), 1e-3*CF))
        ylabel('mean spike count')
        title(sprintf('%s-%s-%s p=%.2f %s',expdate,session, filenum,P, pstring))
    end

 
end %for aindex



