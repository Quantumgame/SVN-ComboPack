function PlotBinGeGi_delay(varargin)
% usage:     PlotBinGeGi_delay('expdate','session','filenum')
%            PlotBinGeGi_delay('expdate','session','filenum',[xlimits])
%            PlotBinGeGi_delay(out)
% plot delay between ge and gi at half max for a binaural tuning curve
% looks for an outfile data structure generated by ProcessBinGeGi
% modified from PlotGeGi_delay
% mw 08-13-2010
% mak 20jun2011 fixed a bug (see lines 139-146 below)

g_toss_threshold=0.5; %ge and gi must be this tall to go on this ride
delay_toss_threshold=20; %to get rid of off response outliers
fprintf('\nFading sessions with max(ge or gi) < %.2f nS and delays > %.1f ms', g_toss_threshold,delay_toss_threshold)
ylimits=[0 1];
xl=[];
fs=12;
LW=1.5;
% n10=1;n50=1;delay50all=0;delay10all=0;

if nargin==0
    fprintf('\nno input');
    return
elseif nargin==1
    in=varargin{1};
    xlimits=in.xlimits;
elseif nargin==3
    expdate=varargin{1};
    session=varargin{2};
    filenum=varargin{3};
    godatadir(expdate, session, filenum)
    outfile=sprintf('out%s-%s-%s.mat', expdate, session, filenum);
    if exist(outfile,'file')==2
        load(outfile)
        if ~isfield(out, 'GE')
            error('outfile does not contain GE data');
        end
    else
        error(sprintf('Could not find outfile. Please run:\nProcessBinGeGi(''expdate'', ''session'', ''filenum'', Vout, [xlimits])'))
    end
    in=out;
    xlimits=out.xlimits;
elseif nargin==4
    expdate=varargin{1};
    session=varargin{2};
    filenum=varargin{3};
    godatadir(expdate, session, filenum)
    outfile=sprintf('out%s-%s-%s.mat', expdate, session, filenum);
    load(outfile)
    if exist(outfile,'file')==2
        load(outfile)
        if ~isfield(out, 'GE')
            error('outfile does not contain GE data');
        end
    else
        error(sprintf('Could not find outfile. Please run:\nProcessBinGeGi(''expdate'', ''session'', ''filenum'', Vout, [xlimits])'))
    end
    in=out;
    %     xlimits=out.xlimits;
    %     xl=varargin{4};
    xlimits=varargin{4};
else
    error('\nPlotBinGeGi: wrong number of arguments');
end
%xl are the xlimits we want to use for plotting
%may or may not be same as xlimits used to create outfile

% Since the plots get wonky when xl~=xlimits (computed for out of frame
% if  length(xl)~=2
%     xl=xlimits;
% end
tbloc=mean(xlimits);

savefiledir='/Users/miichael/Desktop/MatLab/Michael';
try
    cd(savefiledir);
    filename=sprintf('GeGi_delay-%s-%s-%s.txt',expdate, session, filenum);
    if exist(filename,'file');delete(filename);end
    GeGi_delay=fopen(filename,'w+t');
catch
    GeGi_delay=1;
end
% M1=in.M1;
% mM1=in.mM1;
% potentials=in.potentials;
% samprate=in.samprate;
% numpotentials=length(potentials);
expdate=in.expdate;
session=in.session;
filenum=in.filenum;
freqs=in.freqs;
Ramps=in.Ramps;
Lamps=in.Lamps;
durs=in.durs;
numamps=length(Ramps);
numfreqs=length(freqs);
numdurs=length(durs);

%plot the mean tuning curve
for dindex=1:numdurs
    for findex=1:numfreqs
        figure
        p=0;
        subplot1( numamps,numamps)
        for Raindex=numamps:-1:1
            for Laindex=1:numamps
                p=p+1;
                subplot1(p)
                ge=squeeze(in.GE(findex, Raindex, Laindex, dindex,  :));
                gi=squeeze(in.GI(findex, Raindex, Laindex, dindex,  :));
                gsyn=squeeze(in.GSYN(findex, Raindex, Laindex, dindex, 1, :));
                t=1:length(ge);
                t=t/10; % converts back to actual timepoints (e.g., 0:0.1:100, instead of 0:1:1000)
                t=t+xlimits(1); % takes into account passed xlimits
                
                %zoom in axis to conductance rise only
                tgmax=find(gsyn==max(gsyn)); % finds the x-position of max total conductance
                tstart=min(find(gsyn(1:tgmax)/gsyn(tgmax)>.05));
                % This normalizes the curve to 1 and finds the first timepoint above 0.05
                % Perhaps this value needs to be different?
                if tstart>tgmax %tgmax must be in a wierd place, this tone will get tossed anyway
                    error('mak debugging 9jun2011, what''s this for???');
                    tstart=tgmax-1;
                    if tstart==0
                        tstart=tstart+1;
                        tgmax=tgmax+1;
                    end
                end
                
                %normalize ge and gi (rename to gen and gin)
                %                 gen1=ge-min(ge(max(tstart-10, 1):tgmax));
                %                 gin1=gi-min(gi(max(tstart-10, 1):tgmax));
                %                 gen=gen1/max(gen1);
                %                 gin=gin1/max(gin1);
                % I'm doing some debugging here. I don't understand in the four lines above why gen1/gin1
                % are defined the way they are. This leads to some strange y-axis shifting in the subplots
                % (e.g., 052511-mak-005-003)
                % ira this is the half-max code (line 138-167)
                gen=ge/max(ge);
                gin=gi/max(gi);
                
                h=plot(t, gen, 'g', t, gin, 'r', 'linewidth', LW);
                set(h, 'linewidth', 2)
                gen=gen(tstart:tgmax);
                gin=gin(tstart:tgmax);
                tn=t(tstart:tgmax);
                
                %compute delay at g=50%gmax
                %                 tge=find(abs(gen-.5)==min(abs(gen-.5)));
                %                 tgi=find(abs(gin-.5)==min(abs(gin-.5)));
                %               This was a little buggy so I changed the code to what is written below
                %               It may need further adjustment.
                %               E.g. see the difference for file 051211-mak-002-005 switching between the
                %               two lines of code above and below. mak 20jun2011
                tge=find(abs(gen-.5)<=0.01);
                tgi=find(abs(gin-.5)<=0.01);
                if isempty(tge);
                    tge=find(abs(gen-.5)==min(abs(gen-.5)));
                    if isempty(tge);tge=0;end
                end
                if isempty(tgi);
                    tgi=find(abs(gin-.5)==min(abs(gin-.5)));
                    if isempty(tgi);tgi=0;end
                end
                if length(tge)>1; tge=tge(1);end
                if length(tgi)>1; tgi=tgi(1);end
                hold on
                line([tn(tge), tn(tgi)], [gen(tge), gen(tge) ], 'linewidth', LW)
                delay50=(t(tgi)-t(tge));
                delay50s=sprintf('%.1f',(t(tgi)-t(tge)));
                
                %grey out if g are too small
                %                 if (max(gen1)<g_toss_threshold) || (max(gin1)<g_toss_threshold)%g_toss_threshold set at top
                if (max(ge)<g_toss_threshold) || (max(gi)<g_toss_threshold)%g_toss_threshold set at top
                    set(h(1), 'linewidth',1, 'color', [.5 1 .5])% h1 is ge
                    set(h(2), 'linewidth',1, 'color', [1 .5 .5])% h2 is gi
                    Delay50keep(Raindex, Laindex)=-666;
                else
                    Delay50keep(Raindex, Laindex)=delay50;
                end
                if abs(delay50)>delay_toss_threshold %g_toss_threshold set at top
                    set(h(1), 'linewidth',1, 'color', [.5 1 .5])% h1 is ge
                    set(h(2), 'linewidth',1, 'color', [1 .5 .5])% h2 is gi
                    Delay50keep(Raindex, Laindex)=-666;
                elseif Delay50keep(Raindex, Laindex)~=-666
                    Delay50keep(Raindex, Laindex)=delay50;
                end
                
                text(tbloc,0.2,delay50s, 'fontsize', 10)
                fprintf(GeGi_delay,'%s\t',delay50s);
                xlim(xlimits)
                try Delay50(Raindex, Laindex)=delay50;
                catch
                    Delay50(Raindex, Laindex)=0;
                end
            end
            fprintf(GeGi_delay,'\n');
        end
    end
    subplot1(1)
    h=title(sprintf('BinGeGi Delay %s-%s-%s %.1f kHz', expdate,session, filenum, freqs(findex)/1000));
    set(h, 'HorizontalAlignment', 'left')
    
    
    %label amps and freqs
    p=0;
    for Raindex=numamps:-1:1
        for Laindex=1:numamps
            p=p+1;
            subplot1(p)
            if Laindex==1
                if Ramps(Raindex)==-1000
                    T=text(xlimits(1), mean(ylimits), 'silence', 'HorizontalAlignment', 'center');
                    set(T, 'fontsize', fs)
                else
                    T=text(xlimits(1), mean(ylimits), int2str(Ramps(Raindex)));
                    set(T, 'fontsize', fs)
                end
            end
            if Raindex==1
                vpos=ylimits(1)-.5*diff(ylimits);
                if Lamps(Laindex)==-1000
                    T=text(mean(xlimits), vpos, 'silence','HorizontalAlignment', 'center');
                    set(T, 'fontsize', fs)
                else
                    T=text(mean(xlimits), vpos, int2str(Lamps(Laindex)));
                    set(T, 'fontsize', fs)
                end
            end
            
            if Laindex==1 && Raindex==floor(numamps/2)
                vpos=mean(ylimits);
                T=text(xlimits(1)-.2*diff(xlimits), vpos, 'Contralateral level (dB)','rotation', 90,'HorizontalAlignment', 'center');
                set(T, 'fontsize', fs)
            end
            if Laindex==floor(numamps/2) && Raindex==1
                yl=ylim;
                vpos=yl(1)-.3*diff(yl);
                T=text(mean(xlimits), vpos, 'Ipsilateral level (dB)','HorizontalAlignment', 'center');
                set(T, 'fontsize', fs)
            end
            set(gca,'ylim',[-1 1])
            axis off
            %             if Laindex==numamps && Raindex==numamps
            %                 axis on
            %                 set(gca, 'yticklabelmode', 'auto')
            %                 set(gca, 'xticklabelmode', 'auto')
            %             end
        end
    end
end

% plot normalized traces in ABL/ILD coordinates

ABLs=[];ILDs=[];
for Raindex=[numamps:-1:2]
    for Laindex=[2:numamps]
        ABLs=[ABLs mean([Ramps(Raindex) Lamps(Laindex)])];
        ILDs=[ILDs (Ramps(Raindex)- Lamps(Laindex))];
    end
end
ILDs=unique(ILDs);
ABLs=unique(ABLs);
for dindex=1:numdurs
    for findex=1:numfreqs
        figure
        
        p=0;
        subplot1(length(ILDs), length(ABLs))
        
        %note: don't use aindex=1 (-1000 dB) since ABL/ILD undefined for monaural sounds
        
        for Raindex=[numamps:-1:2]
            for Laindex=[2:numamps]
                ABL=mean([Ramps(Raindex) Lamps(Laindex)]);
                ILD=(Ramps(Raindex)- Lamps(Laindex));
                ILDindex=find(ILD==ILDs);
                ABLindex=find(ABL==ABLs);
                subplot1([ length(ABLs)-ABLindex+1 ILDindex]);
                str=sprintf('\nR %d L %d ABL %d ILD %d', Ramps(Raindex), Lamps(Laindex), ABL, ILD);
                text(0,0, str, 'fontsize', 9)
                ge=squeeze(in.GE(findex, Raindex, Laindex, dindex,  :));
                gi=squeeze(in.GI(findex, Raindex, Laindex, dindex,  :));
                gen=ge/max(ge);
                gin=gi/max(gi);
                t=1:length(ge);
                t=t/10;
                t=t+xlimits(1);
                %                 plot(t, gi, 'r', t, ge, 'g', t, stimtrace, 'm')
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                h=plot(t, gen, 'g', t, gin, 'r');
                set(h, 'linewidth', 2)
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                ylim([-1 1])
                xlim(xlimits);
                axis off
                
            end
        end
    end
end
h=get(gcf, 'children');
axis(h, 'off')
%label amps and freqs
fs=14;
p=0;
xl=xlimits;
for ABLindex=[length(ABLs):-1:1]
    for ILDindex=1:length(ILDs)
        p=p+1;
        subplot1(p)
        
        if ABLindex==1
            vpos=ylimits(1)-.2*diff(ylimits);
            T=text(mean(xl), vpos, int2str(ILDs(ILDindex)));
            
            set(T, 'fontsize', fs)
            xlim(xlimits)
            ylim(ylimits)
            %axis on
        end
        if ILDindex==1
            T=text(xl(1)-.2*diff(xl), mean(ylimits), int2str(ABLs(ABLindex)));
            set(T, 'fontsize', fs)
            xlim(xlimits)
            ylim(ylimits)
            %axis on
        end
        
        if ABLindex==1 & ILDindex==floor(length(ILDs)/2)
            vpos=ylimits(1)-.6*diff(ylimits);
            
            T=text(mean(xl), vpos, 'ILD (dB)','HorizontalAlignment', 'center');
            set(T, 'fontsize', fs)
            xlim(xlimits)
            ylim(ylimits)
            
            %axis on
        end
        if ABLindex==floor(length(ABLs)/2) & ILDindex==1
            vpos=mean(ylimits);
            T=text(xl(1)-.4*diff(xl), vpos, 'ABL (dB)','rotation', 90,'HorizontalAlignment', 'center');
            set(T, 'fontsize', fs)
            xlim(xlimits)
            ylim(ylimits)
            %axis on
        end
    end
end


%plot delay as pseudocolor checkerboard
figure
set(gca, 'fontsize', fs)
i=imagesc(Delay50keep);
set(gca, 'ydir', 'normal')
set(gca, 'xtick', 1:length(Lamps))
set(gca, 'xticklabel',  round(Lamps))
set(gca, 'ytick', 1:length(Ramps))
set(gca, 'yticklabel', round(Ramps))
silence_label(5)
xlabel('Ipsilateral level')
ylabel('Contralateral level')
caxis([-20 20])
map=colormap;
map(1,:)=[1 1 1];
%map(end,:)=[1 1 1];
colormap(map)
c=colorbar;
clab=get(c, 'ylabel');
set(clab, 'string','Ge-Gi Delay (ms)')
h=title(sprintf('Binaural Ge-Gi Delay (ms) %s-%s-%s %.1f kHz dur: %d ms', expdate,session, filenum, freqs(findex)/1000, durs(dindex)));


%plot the delay on the y-axis
ylimits=[-20 20];
for dindex=1:numdurs
    for findex=1:numfreqs
        figure
        
        p=0;
        subplot1( numamps, 1)
        
        for Raindex=[numamps:-1:1]
            p=p+1;
            subplot1( p)
            
            r=plot(1:numamps, Delay50(Raindex,:), 'ko-');
            set(r, 'linewidth', 2)
            set(gca, 'fontsize', fs)
            xlimits=[.5 numamps+.5];
            xlim(xlimits);
            line(xlimits, [1 1], 'linestyle', ':')
            ylim(ylimits)
            set(gca, 'xtick', 1:7)
            %            set(gca, 'ytick', [ceil(ylimits(1)), floor(ylimits(2))])
            
            if Ramps(Raindex)==-1000
                %                 text(xlimits(1)-.4, mean(ylimits), 'silence', 'HorizontalAlignment', 'center', 'fontsize', fs);
            else
                text(xlimits(1)-.4, mean(ylimits), int2str(Ramps(Raindex)), 'fontsize', fs)
            end
        end
        Rampslab=num2cell(Ramps);
        Rampslab{1}='silence';
        set(gca, 'xticklabel', Rampslab)
        subplot1(1)
        h=title(sprintf('Binaural Ge-Gi Delay (ms) %s-%s-%s %.1f kHz dur: %d ms', expdate,session, filenum, freqs(findex)/1000, durs(dindex)));
        %set(h, 'HorizontalAlignment', 'left')
        subplot1(round(numamps/2))
        T=text(xlimits(1)-.6, mean(ylimits), 'Contralateral level (dB)',  'rotation', 90, 'fontsize', fs);
        subplot1(numamps);
        xlabel('Ipsilateral level (dB)')
    end
end

clear out
stimtypes=stimtype(expdate, session, filenum);
if sum(strcmp(stimtypes,'bintone'))==1
    outfilename2=sprintf('out%s-%scf%d.mat',expdate,session,durs);
elseif sum(strcmp(stimtypes,'binwhitenoise'))==1
    outfilename2=sprintf('out%s-%swn%d.mat',expdate,session,durs);
end
if exist(outfilename2,'file')==2
    load(outfilename2)
end

aa=size(Delay50keep);
for mm=1:aa(1)
    for nn=1:aa(2)
        if Delay50keep(mm,nn)==-666;
            Delay50keep(mm,nn)=NaN;
        end
    end
end

out.eidelay=Delay50(end:-1:1,:);
out.eidelay_keep=Delay50keep(end:-1:1,:);
save(outfilename2,'out')
fprintf('\nsaved in %s...\n', outfilename2)




function silence_label(n)
%change '-1000' to 'silence' and re-center
%inputs:
%    n: number of blanks to insert
l=get(gca, 'xticklabel');
m=strvcat('silence', l(2:end,:));
set(gca, 'xticklabel', m)
for i=1:n
    m=[blanks(size(m, 1))' m];
end
set(gca, 'xticklabel', m)

l=get(gca, 'yticklabel');
m=strvcat('silence', l(2:end,:));
set(gca, 'yticklabel', m)
for i=1:n
    m=[blanks(size(m, 1))' m];
end
set(gca, 'yticklabel', m)

