function PlotBinGeGi(varargin)
%usage:     PlotBinGeGi(expdate, session, filenum)
%           PlotBinGeGi(expdate, session, filenum, [xlimits])
%           PlotBinGeGi(out)
% E2 tuning curve script
%plot ge and gi binaural tuning curve
%looks for an outfile data structure generated by ProcessBinVCData/compute_bin_ge_gi
xl=[];
if nargin==0
    fprintf('\nno input');
    return
elseif nargin==1
    in=varargin{1};
    xlimits=in.xlimits;
elseif nargin==3
    expdate=varargin{1};
    session=varargin{2};
    filenum=varargin{3};
    try
        godatadir(expdate, session, filenum)
    catch
        godatadirbak(expdate, session, filenum)
    end
    outfile=sprintf('out%s-%s-%s.mat', expdate, session, filenum);
    if exist(outfile)==2
        load(outfile)
        if ~isfield(out, 'GE')
            ProcessBinGeGi(expdate,session,filenum,out.Vout,out.xlimits)
            clear out
            load(outfile)
        end
    else
        error(sprintf('could not find outfile. \nPlease run ProcessBinGeGi(''expdate'', ''session'', ''filenum'',Vout, [xlimits])'))
    end
    in=out;
    xlimits=out.xlimits;
elseif nargin==4
    expdate=varargin{1};
    session=varargin{2};
    filenum=varargin{3};
    try godatadir(expdate, session, filenum)
    catch
        godatadirbak(expdate, session, filenum)
    end
    outfile=sprintf('out%s-%s-%s.mat', expdate, session, filenum);
    load(outfile)
    if exist(outfile)==2
        load(outfile)
        if ~isfield(out, 'GE')
            ProcessBinGeGi(expdate,session,filenum,out.Vout,out.xlimits)
            clear out
            load(outfile)
        end
    else
        error(sprintf('could not find outfile. \nPlease run ProcessBinGeGi(''expdate'', ''session'', ''filenum'',Vout, [xlimits])'))
    end
    in=out;
    xlimits=out.xlimits;
    xl=varargin{4};
else
    error('\nPlotBinGeGi: wrong number of arguments');
end


M1=in.M1;
mM1=in.mM1;
expdate=in.expdate;
session=in.session;
filenum=in.filenum;
freqs=in.freqs;
Ramps=in.Ramps;
Lamps=in.Lamps;
durs=in.durs;
potentials=in.potentials;
samprate=in.samprate;
numamps=length(Ramps);
numfreqs=length(freqs);
numpotentials=length(potentials);
numdurs=length(durs);
trialsremoved=in.trialsremoved;
if isfield(in, 'TrialRemainingAfter')
    TrialRemainingAfter=in.TrialRemainingAfter;
else
    TrialRemainingAfter=0;
end
filterspikes=in.filterspikes;
if filterspikes==0
    nrepsmax=max(max(max(squeeze(in.nreps))));
    nrepsmin=min(min(min(squeeze(in.nreps))));
elseif filterspikes==1
    aa=squeeze(TrialRemainingAfter);
    nrepsmax=max(max(max(sum(aa,4))));
    nrepsmin=min(min(min(sum(aa,4))));
end

%xl are the xlimits we want to use for plotting
%may or may not be same as xlimits used to create outfile
if  length(xl)~=2
    xl=xlimits;
end

%find optimal axis limits
ylimits=[0 0];
for dindex=1:numdurs
    for Raindex=1:numamps
        for Laindex=1:numamps
            
            for findex=1:numfreqs
                ge=squeeze(in.GE(findex, Raindex, Laindex,  dindex, :));
                gi=squeeze(in.GI(findex, Raindex, Laindex,  dindex, :));
                %gsyn=squeeze(in.GSYN(findex, aindex, 1, :));
                %        if findex==3 & aindex==6 trace2=0*trace2;end %exclude this trace from axis optimatization
                %         if min([gsyn])<ylimits(1) ylimits(1)=min([gsyn]);end
                %         if max([gsyn])>ylimits(2) ylimits(2)=max([gsyn]);end
                if min([ge; gi])<ylimits(1) ylimits(1)=min([ge; gi]);end
                if max([ge; gi])>ylimits(2) ylimits(2)=max([ge; gi]);end
            end
        end
    end
end

%ylimits(2)=10;

%plot the mean tuning curve
for dindex=1:numdurs
    for findex=1:numfreqs
        figure
        
        p=0;
        subplot1( numamps,numamps)
        
        for Raindex=[numamps:-1:1]
            for Laindex=[1:numamps]
                
                
                p=p+1;
                subplot1( p)
                
                ge=squeeze(in.GE(findex, Raindex, Laindex, dindex,  :));
                gi=squeeze(in.GI(findex, Raindex, Laindex, dindex,  :));
                gsyn=squeeze(in.GSYN(findex, Raindex, Laindex, dindex, 1, :));
                gsynconf1=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,1));
                gsynconf2=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,2));
                if isfield(in, 'M1stim')
                    stimtrace=squeeze(in.M1stim(findex, Raindex, Laindex, dindex, 1, 2, :));
                    stimtrace=stimtrace-mean(stimtrace(1:100));
                    stimtrace=stimtrace./max(abs(stimtrace));
                    stimtrace=stimtrace*.1*diff(ylimits);
                    stimtrace=stimtrace+ylimits(1);
                else
                    stimtrace=0*ge;
                end
                t=1:length(ge);
                t=t/10;
                t=t+xlimits(1);
                %                 plot(t, gi, 'r', t, ge, 'g', t, stimtrace, 'm')
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                h=plot(t, ge, 'g', t, gi, 'r');
                set(h, 'linewidth', 2)
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                ylim(ylimits)
                xlim(xl);
                axis off
                
            end
        end
        subplot1(1)
        if freqs(findex)/1000 < 1
            h=title(sprintf('%s-%s-%s, WN (%d ms), Max %d, Min %d trials (%d removed)', expdate,session,filenum,durs(dindex),nrepsmax,nrepsmin,trialsremoved));
            set(h, 'HorizontalAlignment', 'left')
        else
            h=title(sprintf('%s-%s-%s, %.1f kHz (%d ms), Max %d, Min %d trials (%d removed)', expdate,session,filenum,freqs(findex)/1000,durs(dindex),nrepsmax,nrepsmin,trialsremoved));
            set(h, 'HorizontalAlignment', 'left')
        end
        
        
        %label amps and freqs
        p=0;
        for Raindex=[numamps:-1:1]
            for Laindex=1:numamps
                p=p+1;
                subplot1(p)
                
                if Laindex==1
                    if Ramps(Raindex)==-1000
                        T=text(xlimits(1), mean(ylimits), 'silence', 'HorizontalAlignment', 'center');
                        set(T, 'fontsize', 18)
                    else
                        T=text(xl(1), mean(ylimits), int2str(Ramps(Raindex)));
                        set(T, 'fontsize', 18)
                    end
                end
                if Raindex==1
                    vpos=ylimits(1)-.1*diff(ylimits);
                    if Lamps(Laindex)==-1000
                        T=text(mean(xl), vpos, 'silence','HorizontalAlignment', 'center');
                        set(T, 'fontsize', 18)
                    else
                        T=text(mean(xl), vpos, int2str(Lamps(Laindex)));
                        set(T, 'fontsize', 18)
                    end
                end
                
                if Laindex==1 & Raindex==floor(numamps/2)
                    vpos=mean(ylimits);
                    T=text(xl(1)-.2*diff(xl), vpos, 'Contralateral ear sound amp (dB)','rotation', 90,'HorizontalAlignment', 'center');
                    set(T, 'fontsize', 18)
                end
                if Laindex==floor(numamps/2) & Raindex==1
                    vpos=ylimits(1)-.3*diff(ylimits);
                    T=text(mean(xl), vpos, 'Ipsilateral ear sound amp (dB)','HorizontalAlignment', 'center');
                    set(T, 'fontsize', 18)
                end
                axis off
                if Laindex==numamps & Raindex==numamps
                    axis on
                    set(gca, 'yticklabelmode', 'auto')
                    set(gca, 'xticklabelmode', 'auto')
                end
            end
        end
    end
end


%re-plot the same data, but in ABL-ILD coordinates

ABLs=[];ILDs=[];
for Raindex=[numamps:-1:2]
    for Laindex=[2:numamps]
        ABLs=[ABLs mean([Ramps(Raindex) Lamps(Laindex)])];
        ILDs=[ILDs (Ramps(Raindex)- Lamps(Laindex))];
    end
end
ILDs=unique(ILDs);
ABLs=unique(ABLs);


for dindex=1:numdurs
    for findex=1:numfreqs
        figure
        
        p=0;
        subplot1(length(ILDs), length(ABLs))
        
        %note: don't use aindex=1 (-1000 dB) since ABL/ILD undefined for monaural sounds
        
        for Raindex=[numamps:-1:2]
            for Laindex=[2:numamps]
                ABL=mean([Ramps(Raindex) Lamps(Laindex)]);
                ILD=(Ramps(Raindex)- Lamps(Laindex));
                ILDindex=find(ILD==ILDs);
                ABLindex=find(ABL==ABLs);
                subplot1([ length(ABLs)-ABLindex+1 ILDindex]);
                str=sprintf('\nR %d L %d ABL %d ILD %d', Ramps(Raindex), Lamps(Laindex), ABL, ILD);
                text(0,0, str, 'fontsize', 9)
                ge=squeeze(in.GE(findex, Raindex, Laindex, dindex,  :));
                gi=squeeze(in.GI(findex, Raindex, Laindex, dindex,  :));
                gsyn=squeeze(in.GSYN(findex, Raindex, Laindex, dindex, 1, :));
                gsynconf1=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,1));
                gsynconf2=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,2));
                if isfield(in, 'M1stim')
                    stimtrace=squeeze(in.M1stim(findex, Raindex, Laindex, dindex, 1, 2, :));
                    stimtrace=stimtrace-mean(stimtrace(1:100));
                    stimtrace=stimtrace./max(abs(stimtrace));
                    stimtrace=stimtrace*.1*diff(ylimits);
                    stimtrace=stimtrace+ylimits(1);
                else
                    stimtrace=0*ge;
                end
                t=1:length(ge);
                t=t/10;
                t=t+xlimits(1);
                %                 plot(t, gi, 'r', t, ge, 'g', t, stimtrace, 'm')
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                h=plot(t, ge, 'g', t, gi, 'r');
                set(h, 'linewidth', 2)
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                ylim(ylimits)
                xlim(xl);
                axis off
                
            end
        end
        subplot1(1)
        if freqs(findex)/1000 < 1
            h=title(sprintf('%s-%s-%s, WN (%d ms), Max %d, Min %d trials (%d removed)', expdate,session,filenum,durs(dindex),nrepsmax,nrepsmin,trialsremoved));
            set(h, 'HorizontalAlignment', 'left')
        else
            h=title(sprintf('%s-%s-%s, %.1f kHz (%d ms), Max %d, Min %d trials (%d removed)', expdate,session,filenum,freqs(findex)/1000,durs(dindex),nrepsmax,nrepsmin,trialsremoved));
            set(h, 'HorizontalAlignment', 'left')
        end
        
        h=get(gcf, 'children');
        axis(h, 'off')
        
        
        
        
        
        
        %label amps and freqs
        fs=14;
        p=0;
        for ABLindex=[length(ABLs):-1:1]
            for ILDindex=1:length(ILDs)
                p=p+1;
                subplot1(p)
                
                if ABLindex==1
                    vpos=ylimits(1)-.2*diff(ylimits);
                    T=text(mean(xl), vpos, int2str(ILDs(ILDindex)));
                    
                    set(T, 'fontsize', fs)
                    xlim(xlimits)
                    ylim(ylimits)
                    %axis on
                end
                if ILDindex==1
                    T=text(xl(1)-.2*diff(xl), mean(ylimits), int2str(ABLs(ABLindex)));
                    set(T, 'fontsize', fs)
                    xlim(xlimits)
                    ylim(ylimits)
                    %axis on
                end
                
                if ABLindex==1 & ILDindex==floor(length(ILDs)/2)
                    vpos=ylimits(1)-.6*diff(ylimits);
                    
                    T=text(mean(xl), vpos, 'ILD (dB)','HorizontalAlignment', 'center');
                    set(T, 'fontsize', fs)
                    xlim(xlimits)
                    ylim(ylimits)
                    
                    %axis on
                end
                if ABLindex==floor(length(ABLs)/2) & ILDindex==1
                    vpos=mean(ylimits);
                    T=text(xl(1)-.4*diff(xl), vpos, 'ABL (dB)','rotation', 90,'HorizontalAlignment', 'center');
                    set(T, 'fontsize', fs)
                    xlim(xlimits)
                    ylim(ylimits)
                    %axis on
                end
                
            end
        end
    end
end
