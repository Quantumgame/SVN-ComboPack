function PlotBinGeGi_psth(varargin)
%usage:     PlotBinGeGi_psth(expdate1, session1, filenum1, expdate2, session2, filenum2)
%           PlotBinGeGi_psth(expdate1, session1, filenum1, expdate2, session2, filenum2, [xlimits])
%
%plot ge and gi binaural tuning curve (file1) plus spiking psth (file2)
%looks for outfiles generated by ProcessBinVCData/compute_bin_ge_gi and ???
xl=[];
if nargin==0
    fprintf('\nno input');
    return
end
if nargin==6 || nargin==7
    expdate1=varargin{1};
    session1=varargin{2};
    filenum1=varargin{3};
    expdate2=varargin{4};
    session2=varargin{5};
    filenum2=varargin{6};
    try
        godatadir(expdate1, session1, filenum1)
    catch
        godatadirbak(expdate1, session1, filenum1)
    end
    outfile1=sprintf('out%s-%s-%s.mat', expdate1, session1, filenum1);
    if exist(outfile1)==2
        load(outfile1)
        if ~isfield(out, 'GE')
            error('could not find gegi data in outfile. Please run ProcessBinGeGi')
        end
    else
        error('could not find outfile. Please run ProcessBinGeGi')
    end
    in=out;
    xlimits=out.xlimits;

    outfile2=sprintf('out%s-%s-%s.mat', expdate2, session2, filenum2);
    try
        godatadir(expdate1, session1, filenum1)
    catch
        godatadirbak(expdate1, session1, filenum1)
    end
    if exist(outfile2)==2
        load(outfile2)
        in2=out;
    else
        error('could not find outfile. Please run ProcessPsth')
    end

end

if nargin==7
    xl=varargin{7};
end

if ~sum(nargin==[6 7])
    error('\nPlotBinGeGi_psth: wrong number of arguments');
end

fs=12;
fsbig=18;

M1=in.M1;
mM1=in.mM1;
freqs=in.freqs;
Ramps=in.Ramps;
Lamps=in.Lamps;
durs=in.durs;
potentials=in.potentials;
samprate=in.samprate;
numamps=length(Ramps);
numfreqs=length(freqs);
numpotentials=length(potentials);
numdurs=length(durs);

%xl are the xlimits we want to use for plotting
%may or may not be same as xlimits used to create outfile
if  length(xl)~=2
    xl=xlimits;
end

%find optimal axis limits
ylimits=[0 0];
for dindex=1:numdurs
    for Raindex=1:numamps
        for Laindex=1:numamps

            for findex=1:numfreqs
                ge=squeeze(in.GE(findex, Raindex, Laindex,  dindex, :));
                gi=squeeze(in.GI(findex, Raindex, Laindex,  dindex, :));
                %gsyn=squeeze(in.GSYN(findex, aindex, 1, :));
                %        if findex==3 & aindex==6 trace2=0*trace2;end %exclude this trace from axis optimatization
                %         if min([gsyn])<ylimits(1) ylimits(1)=min([gsyn]);end
                %         if max([gsyn])>ylimits(2) ylimits(2)=max([gsyn]);end
                if min([ge; gi])<ylimits(1) ylimits(1)=min([ge; gi]);end
                if max([ge; gi])>ylimits(2) ylimits(2)=max([ge; gi]);end
            end
        end
    end
end

%ylimits(2)=10;

%plot the mean tuning curve
for dindex=1:numdurs
    for findex=1:numfreqs
        figure

        p=0;
        subplot1( 2*numamps,numamps)

        for Raindex=[numamps:-1:1]
            p=p+numamps;
            for Laindex=[1:numamps]


                p=p+1;
                subplot1( p)

                ge=squeeze(in.GE(findex, Raindex, Laindex, dindex,  :));
                gi=squeeze(in.GI(findex, Raindex, Laindex, dindex,  :));
                gsyn=squeeze(in.GSYN(findex, Raindex, Laindex, dindex, 1, :));
                gsynconf1=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,1));
                gsynconf2=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,2));
                if isfield(in, 'M1stim')
                    stimtrace=squeeze(in.M1stim(findex, Raindex, Laindex, dindex, 1, 2, :));
                    stimtrace=stimtrace-mean(stimtrace(1:100));
                    stimtrace=stimtrace./max(abs(stimtrace));
                    stimtrace=stimtrace*.1*diff(ylimits);
                    stimtrace=stimtrace+ylimits(1);
                else
                    stimtrace=0*ge;
                end
                t=1:length(ge);
                t=t/10;
                t=t+xlimits(1);
                %                 plot(t, gi, 'r', t, ge, 'g', t, stimtrace, 'm')
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                h=plot(t, ge, 'g', t, gi, 'r');
                set(h, 'linewidth', 2)
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                ylim(ylimits)
                xlim(xl);
                axis off

            end
        end
        subplot1(1)
        h=title(sprintf('Binaural Conductances\nFile: %s-%s-%s %.1f kHz dur: %d ms', expdate1,session1, filenum1, freqs(findex)/1000, durs(dindex)));
        set(h, 'HorizontalAlignment', 'left')


        %label amps and freqs
        p=0;
        for Raindex=[numamps:-1:1]
            p=p+numamps;
            for Laindex=1:numamps
                p=p+1;
                subplot1(p)

                if Laindex==1
                    if Ramps(Raindex)==-1000
                        T=text(xlimits(1), mean(ylimits), 'silence', 'HorizontalAlignment', 'center');
                        set(T, 'fontsize', fsbig)
                    else
                        T=text(xl(1), mean(ylimits), int2str(Ramps(Raindex)));
                        set(T, 'fontsize', fsbig)
                    end
                end
                if Raindex==1
                    vpos=ylimits(1)-.1*diff(ylimits);
                    if Lamps(Laindex)==-1000
                        T=text(mean(xl), vpos, 'silence','HorizontalAlignment', 'center');
                        set(T, 'fontsize', fsbig)
                    else
                        T=text(mean(xl), vpos, int2str(Lamps(Laindex)));
                        set(T, 'fontsize', fsbig)
                    end
                end

                if Laindex==1 & Raindex==floor(numamps/2)
                    vpos=mean(ylimits);
                    T=text(xl(1)-.2*diff(xl), vpos, 'Right ear sound amp (dB)','rotation', 90,'HorizontalAlignment', 'center');
                    set(T, 'fontsize', fsbig)
                end
                if Laindex==floor(numamps/2) & Raindex==1
                    vpos=ylimits(1)-.3*diff(ylimits);
                    T=text(mean(xl), vpos, 'Left ear sound amp (dB)','HorizontalAlignment', 'center');
                    set(T, 'fontsize', fsbig)
                end
                axis off
                if Laindex==numamps & Raindex==numamps
                    axis on
                    set(gca, 'yticklabelmode', 'auto')
                    set(gca, 'xticklabelmode', 'auto')
                end
            end
        end
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
M2=in2.M1;
mM2=in2.mM1;
freqs2=in2.freqs;
Ramps2=in2.Ramps;
Lamps2=in2.Lamps;
durs2=in2.durs;
samprate2=in2.samprate;
numamps2=length(Ramps2);
numfreqs2=length(freqs2);
numdurs2=length(durs2);
binwidth=in2.binwidth;
nstd=in2.nstd;
thresh=in2.thresh;
ylimits2=in2.ylimits;
dspikes=in2.dspikes;

if Ramps2~=Ramps | freqs2~=freqs | Lamps2~=Lamps | durs2~=durs
    error('amps/freq/dur mismatch between file 1 and file 2')
end


%plot ch1
for dindex=[1:numdurs]
    for findex=1:numfreqs
        % figure
        p=0;
        %subplot1( 2*numamps,numamps)
        for Raindex=[numamps:-1:1]
            for Laindex=[1:numamps]

                p=p+1;
                subplot1( p)
                hold on
                spiketimes1=mM2(findex, Raindex, Laindex, dindex).spiketimes;
                %         %use this code to plot curves
                %         [n, x]=hist(spiketimes1, numbins);
                %         r=plot(x, n);
                %         set(r, 'linewidth', 2)
                %use this code to plot histograms
                X=xlimits(1):binwidth:xlimits(2); %specify bin centers
                hist(spiketimes1, X);
                line([0 0+durs(dindex)], [-1 -1], 'color', [.5 .5 .5], 'linewidth', 2)
                line(xlimits, [0 0], 'color', 'k')
                ylim(ylimits2)
                xlim(xl)
                set(gca, 'fontsize', fs)
                axis off
            end
            p=p+numamps;
        end


        %           %label amps and freqs
        %         p=0;
        %         for Raindex=[numamps:-1:1]
        %             for Laindex=1:numamps
        %                 p=p+1;
        %                 subplot1(p)
        %                 if Laindex==1
        %                     if Ramps(Raindex)==-1000
        %                         text(xlimits(1), mean(ylimits2), 'silence', 'HorizontalAlignment', 'center');
        %                     else
        %                         text(xlimits(1), mean(ylimits2), int2str(Ramps(Raindex)))
        %                     end
        %                 end
        %                 if Raindex==1
        %                     vpos=ylimits2(1)-.1*diff(ylimits2);
        %                     if Lamps(Laindex)==-1000
        %                         text(mean(xlimits), vpos, 'silence','HorizontalAlignment', 'center');
        %                     else
        %                         text(mean(xlimits), vpos, int2str(Lamps(Laindex)))
        %                     end
        %                 end
        %
        %                 if Laindex==1 & Raindex==floor(numamps/2)
        %                     vpos=mean(ylimits2);
        %                     T=text(xlimits(1)-.2*diff(xlimits), vpos, 'Right','rotation', 90,'HorizontalAlignment', 'center');
        %                 end
        %                 if Laindex==floor(numamps/2) & Raindex==1
        %                     vpos=ylimits2(1)-.3*diff(ylimits2);
        %                     T=text(mean(xlimits), vpos, 'Left','HorizontalAlignment', 'center');
        %                 end
        %                 axis off
        %             end
        %         end


        subplot1(ceil(numamps/2))
%         if length(in2.nstd)==1
%             title(sprintf('%s-%s-%s: %.1f kHz, dur=%d, nstd=%g, %dms bins, %d spikes',expdate2,session2, filenum2, freqs(findex)/1000, durs(dindex), nstd,binwidth,length(dspikes)))
%         else
%             title(sprintf('%s-%s-%s: %.1f kHz, dur=%d, nstd=%g mV, %dms bins, %d spikes',expdate2,session2, filenum2, freqs(findex)/1000, durs(dindex), nstd(2),binwidth,length(dspikes)))
%         end


    end %for findex
end %for dindex

