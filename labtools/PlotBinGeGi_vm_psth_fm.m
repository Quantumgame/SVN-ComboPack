function PlotBinGeGi_vm_psth_fm(varargin)
%usage:     PlotBinGeGi_vm_psth_fm(expdate1, session1, filenum1, expdate2, session2, filenum2)
%           PlotBinGeGi_vm_psth_fm(expdate1, session1, filenum1, expdate2, session2, filenum2, [thresh], [xlimits])
%
%plot ge and gi binaural tuning curve (file1) plus Vm tuning curve (file2)
%plus predicted Vm from forward model (file1) plus spiking psth (file2)
%plus predicted psth (from file1, based on predicted Vm and threshold)
%
%inputs: thresh (for predicted psth) is in mV above predicted Vrest 
%
%looks for outfiles generated by ProcessBinGeGi (file1)
%and ProcessBinTC (file2) 
%and ProcessBinTC_psth (file2)

xl=[];
if nargin==0
    fprintf('\nno input');
    return
end
if nargin==6 | nargin==7 | nargin==8
    expdate1=varargin{1};
    session1=varargin{2};
    filenum1=varargin{3};
    expdate2=varargin{4};
    session2=varargin{5};
    filenum2=varargin{6};
    godatadir(expdate1, session1, filenum1)
    outfile1=sprintf('out%s-%s-%s.mat', expdate1, session1, filenum1);
    if exist(outfile1)==2
        load(outfile1)
        if ~isfield(out, 'GE')
            error('could not find gegi data in outfile. Please run ProcessBinGeGi')
        end
    else
        error('could not find outfile. Please run ProcessBinGeGi')
    end
    in=out;
    xlimits=out.xlimits;

    outfile2=sprintf('out%s-%s-%s.mat', expdate2, session2, filenum2);
    godatadir(expdate2, session2, filenum2)
    if exist(outfile2)==2
        load(outfile2)
        in2=out;
    else
        error('could not find outfile. Please run ProcessPsth')
    end
    
    outvmfile=sprintf('outvm%s-%s-%s.mat', expdate2, session2, filenum2);
    godatadir(expdate2, session2, filenum2)
    if exist(outvmfile)==2
        load(outvmfile)
        invm=out;
    else
        error('could not find outvmfile. Please run ProcessPsth')
    end

end
thresh=[];

if nargin==7 | nargin==8
    thresh=varargin{7};
    if size(thresh)~=1
        error('thresh is wrong size')
    end
end

if nargin==8
    xl=varargin{7};
    if size(xl)~=2
        error('xlimits are wrong size')
    end
end

if isempty(thresh)
    thresh=10; %default threshold in mV above rest
end

if ~sum(nargin==[6 7 8])
    error('\nPlotBinGeGi_psth: wrong number of arguments');
end

fs=12;
fsbig=18;

M1=in.M1;
mM1=in.mM1;
freqs=in.freqs;
Ramps=in.Ramps;
Lamps=in.Lamps;
durs=in.durs
potentials=in.potentials;
samprate=in.samprate;
numamps=length(Ramps);
numfreqs=length(freqs);
numpotentials=length(potentials);
numdurs=length(durs);

if length(in.M1) ~= length(invm.M1)
    error('different xlimits for GeGi file and Vm file.\n Please run ProcessXXX with matching xlimits')
end

% default params for foward model
dt=1000/out.samprate;
Gl=1/in.meanrs;
C=1;
Th=20;

%xl are the xlimits we want to use for plotting
%may or may not be same as xlimits used to create outfile
if  length(xl)~=2
    xl=xlimits;
end

%find optimal axis limits
ylimits=[0 0];
for dindex=1:numdurs
    for Raindex=1:numamps
        for Laindex=1:numamps

            for findex=1:numfreqs
                ge=squeeze(in.GE(findex, Raindex, Laindex,  dindex, :));
                gi=squeeze(in.GI(findex, Raindex, Laindex,  dindex, :));
                %gsyn=squeeze(in.GSYN(findex, aindex, 1, :));
                %        if findex==3 & aindex==6 trace2=0*trace2;end %exclude this trace from axis optimatization
                %         if min([gsyn])<ylimits(1) ylimits(1)=min([gsyn]);end
                %         if max([gsyn])>ylimits(2) ylimits(2)=max([gsyn]);end
                if min([ge; gi])<ylimits(1) ylimits(1)=min([ge; gi]);end
                if max([ge; gi])>ylimits(2) ylimits(2)=max([ge; gi]);end
                
                %generate fm (forward model) vm predictions to plot later
                %truncate negative conductances or else forward model blows
                %up
                gi(find(gi<0))=0;
                ge(find(ge<0))=0;
                I=0*ge; %set current injection to zero
                [V, spiketimes] = IFg_nonspiking( ge, gi, Gl, I, C,dt, Th);

                %truncate V to [-20 50] because it blows up anyway
                Vfm(findex, Raindex, Laindex, :)=V;
%                 t=1:length(V);
%                 plot(t, ge, t, gi, t, V)

            end
        end
    end
end

%ylimits(2)=10;

%plot the mean tuning curve
for dindex=1:numdurs
    for findex=1:numfreqs

%         subplot1( 4*numamps,numamps)

        for Raindex=[numamps:-1:1]
            fig(Raindex)=figure;
                    p=3*numamps;
            subplot1( 4,numamps)

            for Laindex=[1:numamps]


                p=p+1;
                subplot1( p)

                ge=squeeze(in.GE(findex, Raindex, Laindex, dindex,  :));
                gi=squeeze(in.GI(findex, Raindex, Laindex, dindex,  :));
                gsyn=squeeze(in.GSYN(findex, Raindex, Laindex, dindex, 1, :));
                gsynconf1=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,1));
                gsynconf2=squeeze(in.GSYNconf(findex, Raindex, Laindex, dindex, :,2));
                if isfield(in, 'M1stim')
                    stimtrace=squeeze(in.M1stim(findex, Raindex, Laindex, dindex, 1, 2, :));
                    stimtrace=stimtrace-mean(stimtrace(1:100));
                    stimtrace=stimtrace./max(abs(stimtrace));
                    stimtrace=stimtrace*.1*diff(ylimits);
                    stimtrace=stimtrace+ylimits(1);
                else
                    stimtrace=0*ge;
                end
                t=1:length(ge);
                t=t/10;
                t=t+xlimits(1);
                %                 plot(t, gi, 'r', t, ge, 'g', t, stimtrace, 'm')
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                h=plot(t, ge, 'g', t, gi, 'r');
                set(h, 'linewidth', 2)
                %plot(t, ge, 'g', t, gi, 'r', t, gsyn, 'k')
                ylim(ylimits)
                xlim(xl);
                axis off

            end
        end
        subplot1(1)
        h=title(sprintf('%s-%s-%s,%s', expdate1,session1, filenum1,filenum2));
        set(h, 'HorizontalAlignment', 'left')


        %label amps and freqs

        for Raindex=[numamps:-1:1]
            figure(fig(Raindex))
            p=3*numamps;
            for Laindex=1:numamps
                p=p+1;
                subplot1(p)

                if Laindex==1
                    if Ramps(Raindex)==-1000
                        T=text(xlimits(1), mean(ylimits), 'silence', 'HorizontalAlignment', 'center');
                        set(T, 'fontsize', fsbig)
                    else
                        T=text(xl(1), mean(ylimits), int2str(Ramps(Raindex)));
                        set(T, 'fontsize', fsbig)
                    end
                end
                if Raindex==1
                    vpos=ylimits(1)-.1*diff(ylimits);
                    if Lamps(Laindex)==-1000
                        T=text(mean(xl), vpos, 'silence','HorizontalAlignment', 'center');
                        set(T, 'fontsize', fsbig)
                    else
                        T=text(mean(xl), vpos, int2str(Lamps(Laindex)));
                        set(T, 'fontsize', fsbig)
                    end
                end

                if Laindex==1 
                    vpos=max(ylimits);
                    T=text(xl(1)-.2*diff(xl), vpos, 'Right ear sound amp (dB)','rotation', 90,'HorizontalAlignment', 'left');
                    set(T, 'fontsize', fsbig)
                end
                if Laindex==floor(numamps/2) %& Raindex==1
                    vpos=ylimits(1)-.3*diff(ylimits);
                    T=text(mean(xl), vpos, 'Left ear sound amp (dB)','HorizontalAlignment', 'center');
                    set(T, 'fontsize', fsbig)
                end
                axis off
                if Laindex==numamps & Raindex==numamps
                    axis on
                    set(gca, 'yticklabelmode', 'auto')
                    set(gca, 'xticklabelmode', 'auto')
                end
            end
        end
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
M2=in2.M1;
mM2=in2.mM1;
freqs2=in2.freqs;
Ramps2=in2.Ramps;
Lamps2=in2.Lamps;
durs2=in2.durs
samprate2=in2.samprate;
numamps2=length(Ramps2);
numfreqs2=length(freqs2);
numdurs2=length(durs2);
binwidth=in2.binwidth;
nstd=in2.nstd;
thresh=in2.thresh;
ylimits2=in2.ylimits;
dspikes=in2.dspikes;

if Ramps2~=Ramps | freqs2~=freqs | Lamps2~=Lamps | durs2~=durs
    error('amps/freq/dur mismatch between file 1 and file 2')
end


%plot ch1
for dindex=[1:numdurs]
    for findex=1:numfreqs
        for Raindex=[numamps:-1:1]
            figure(fig(Raindex))
            p=numamps;
            for Laindex=[1:numamps]
                p=p+1;
                subplot1( p)
                hold on
                spiketimes1=mM2(findex, Raindex, Laindex, dindex).spiketimes;
                %         %use this code to plot curves
                %         [n, x]=hist(spiketimes1, numbins);
                %         r=plot(x, n);
                %         set(r, 'linewidth', 2)
                %use this code to plot histograms
                X=xlimits(1):binwidth:xlimits(2); %specify bin centers
                hist(spiketimes1, X);
                line([0 0+durs(dindex)], [-1 -1], 'color', [.5 .5 .5], 'linewidth', 2)
                line(xlimits, [0 0], 'color', 'k')
                ylim(ylimits2)
                xlim(xl)
                set(gca, 'fontsize', fs)
                axis off
            end
        end
    end %for findex
end %for dindex


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Mvm=invm.M1;
mMvm=invm.mM1;
freqsvm=invm.freqs;
Rampsvm=invm.Ramps;
Lampsvm=invm.Lamps;
dursvm=invm.durs
sampratevm=invm.samprate;
numampsvm=length(Rampsvm);
numfreqsvm=length(freqsvm);
numdursvm=length(dursvm);
ylimitsvm=invm.ylimits;


if Rampsvm~=Ramps | freqsvm~=freqs | Lampsvm~=Lamps | dursvm~=durs
    error('amps/freq/dur mismatch between file 1 and vm file')
end



%plot vm
for dindex=[1:numdurs]
    for findex=1:numfreqs
        for Raindex=[numamps:-1:1]
            figure(fig(Raindex))
            p=2*numamps;
            for Laindex=[1:numamps]
                p=p+1;
                subplot1( p)
                hold on
                vm=squeeze(mMvm(findex, Raindex, Laindex, dindex,:));
                vm=vm-mean(vm(1:100));

                vfm=squeeze(Vfm(findex, Raindex, Laindex,:));
                %vfm=vfm-mean(vfm(1:100));

                t=1:length(vm);
                t=1000*t/sampratevm;
                plot(t, vm, 'k', t, vfm, 'r')
                %ylim(ylimitsvm)
                xlim(xl)
                set(gca, 'fontsize', fs)
                axis off
            end
        end
    end %for findex
end %for dindex

%%%%%%%%%%%%%%%%%%%
%threshold fm to generate predicted spike probability

%plot vm
for dindex=[1:numdurs]
    for findex=1:numfreqs
        for Raindex=[numamps:-1:1]
            figure(fig(Raindex))
            p=0;
            for Laindex=[1:numamps]
                p=p+1;
                subplot1( p)
                hold on

                vfm=squeeze(Vfm(findex, Raindex, Laindex,:));
                vfm(find(vfm<thresh))=0;
                pspike=vfm;
                
                t=1:length(pspike);
                t=1000*t/sampratevm;
                bar(t, pspike)
                %ylim(ylimitsvm)
                xlim(xl)
                set(gca, 'fontsize', fs)
                axis off
            end
        end
    end %for findex
end %for dindex
