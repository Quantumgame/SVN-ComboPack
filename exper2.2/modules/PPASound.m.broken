function out=PPASound(varargin)

% exper2 module that initializes, loads, and plays sounds using PsychoPhysicsToolbox PortAudio (PTB) routines
%note: this module requires that PsychToolbox is installed. Freely available from psychtoolbox.org
% you also have to separately install the asio driver, use the link on
% http://psychtoolbox.org/wikka.php?wakka=PsychPortAudio
%(look for the link that says "Click this link to download the special ASIO
%enabled windows sound driver"). Then put psychportaudio_x86.dll in C:\toolbox\Psychtoolbox\


global exper pref

if nargin > 0
    action = lower(varargin{1});
else
    action = lower(get(gcbo,'tag'));
end

switch action
    case 'init'
        % ModuleNeeds(me,{'rp2control'}); % needs RP2Control to find out how to talk to RP2
        SetParam(me,'priority',GetParam('stimulusprotocol','priority')+1);
        InitializeGUI;                  % show the gui = message box:-)
        InitPPA;                        % Initialize soundmachine
        
    case 'reset'
        % Stop playback:
        PPAhandle=GetParam(me,'PPAhandle');
        PsychPortAudio('Stop', PPAhandle);
        PsychPortAudio('Close', PPAhandle);
        InitPPA;
        
    case 'esealteston'
        %PPASound('reset');
        
    case 'estimulusprotocolchanged'
        %PPASound('reset');
        
    case 'load'
        if nargin<3
            return;
        end
        try
            if nargin==4
                LoadPPA(varargin{2},varargin{3},varargin{4});
            else
                param.channel=1;
                LoadPPA(varargin{2},varargin{3},param); % first channel is the default channel
            end
        catch
            message(me,'Cannot load sound');
        end
        
    case 'samplerate'
        out=GetParam(me,'SoundFs');
        
    case 'PPAhandle'
        out=GetParam(me,'PPAhandle');
        
    case 'playsound'
        PlaySound;
        
    case 'stop'
        % Stop playback:
        PPAhandle=GetParam(me,'PPAhandle');
        PsychPortAudio('Stop',PPAhandle,0);
        
    case 'close'
        try
            % Stop playback:
            PPAhandle=GetParam(me,'PPAhandle');
            PsychPortAudio('Stop',PPAhandle);
            PsychPortAudio('Close');
        catch
            message(me, 'failed to close device')
            pause(.2)
        end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function InitPPA
global exper pref
if ExistParam(me,'PPAhandle') % take the existing ActiveX control
    PPAhandle=GetParam(me,'PPAhandle');
    try
        PsychPortAudio('Stop',PPAhandle );
        % Done, close driver and display:
        Priority(0);
        PsychPortAudio('Close');
    catch
        message(me, 'InitPPA: failed to close device')
        pause(.2)
    end
end
% Initialize driver, request low-latency preinit:
InitializePsychSound(1);
%note: this module requires that PsychToolbox is installed. Freely
%available from psychtoolbox.org
%You might need to reinstall PsychToolbox after a fresh matlab
%install/upgrade
%also, after a fresh PsychToolbox install, you need to download the
%ASIO-enabled PPA driver
%(http://psychtoolbox.org/wikka.php?wakka=PsychPortAudio) and copy the
%enclosed portaudio_x86.dll into C:\toolbox\Psychtoolbox
PsychPortAudio('Verbosity', 1); %nm 09.09.08 turn off all text feedback from PPA

%because it is machine dependent, we now set deviceid in Prefs.m
%use printdevices.m to figure out which device id to use for your soundcard
deviceid = pref.soundcarddeviceID; %32; %11;

numChan = pref.num_soundcard_outputchannels; %set in Prefs.m
reqlatencyclass = pref.reqlatencyclass;
%because it is machine dependent, we now set reqlatencyclass in Prefs.m
%on rig1 use 4; %on rig2, set to 1 (the default) to avoid dropouts mw 051809
%on rig1, 1 seems to cause dropouts but 2/3/4 seem better
% class 2 empirically the best, 3 & 4 == 2
% 'reqlatencyclass' Allows to select how aggressive PsychPortAudio should be about
% minimizing sound latency and getting good deterministic timing, i.e. how to
% trade off latency vs. system load and playing nicely with other sound
% applications on the system. Level 0 means: Don't care about latency, this mode
% works always and with all settings, plays nicely with other sound applications.
% Level 1 (the default) means: Try to get the lowest latency that is possible
% under the constraint of reliable playback, freedom of choice for all parameters
% and interoperability with other applications. Level 2 means: Take full control
% over the audio device, even if this causes other sound applications to fail or
% shutdown. Level 3 means: As level 2, but request the most aggressive settings
% for the given device. Level 4: Same as 3, but fail if device can't meet the
% strictest requirements.

SoundFs = pref.SoundFs;        % Must set this. 96khz, 48khz, 44.1khz.
buffSize = 32;           % Low latency: 32, 64 or 128. High latency: 512>=
% nm 05.07.09 changed to 32, should fix dropouts.  If not, open LynxMixer.exe
% (in C:\lynx) and Settings->Buffer Size->32
% If Lynx seems not to change buffer size then type "CloseAllSoundDevices" into Matlab.
% You can monitor for dropouts using the LynxMixer as well.
buffPos = 0;

% Open audio device for low-latency output:


PPAhandle = PsychPortAudio('Open', deviceid, [], reqlatencyclass, SoundFs, numChan, buffSize);

%runMode = 0; %default, turns off soundcard after playback
runMode = 1; %leaves soundcard on (hot), uses more resources but may solve dropouts? mw 08.25.09: so far so good.
PsychPortAudio('RunMode', PPAhandle, runMode);

% Unknown system: Assume zero bias. User can override with measured
% values:
%latbias = 0.0013;

% Tell driver about hardwares inherent latency, determined via calibration
% once:
%prelat = PsychPortAudio('LatencyBias', PPAhandle, latbias);
%postlat = PsychPortAudio('LatencyBias', PPAhandle);

if isempty(PPAhandle)
    message(me,'Can''t create PsychPortAudio object...');
    return;
end
InitParam(me,'PPAhandle','value',PPAhandle); %param to hold the PsychPortAudio object
InitParam(me,'numChan','value',numChan); %param to hold number of output channels with which we initialized card (num rows of samples must match this)
InitParam(me,'SoundFs','value',SoundFs); %param to hold the sampling rate
InitParam(me,'Samples','value',[]); %param to hold the samples, used only for looping
InitParam(me,'loop_flg','value',0); %param to store loop flag
InitParam(me,'seamless','value',0); %param to store whether transition should be seamless or not
message(me, sprintf('Initialized PsychPortAudio with device %d', deviceid));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function LoadPPA(type,where,param)
% loads data to soundmachine. type can be either 'file' or 'var'
switch type
    case 'file'
        try
            load(where,'samples');
            str=[where ' loaded'];  % string to be displayed in the message box
        catch
            message(sprintf('Cannot load %s', where));
            return;
        end
    case 'var'
        samples=where;
        str='vector loaded'; % string to be displayed in the message box
    otherwise
        return;
end

% if isfield(param,'channel')
%     channel=param.channel(1);
% else
%     channel=1;  % default channel
% end

if isfield(param, 'loop_flg')
    loop_flg=param.loop_flg;
else
    loop_flg=0;
end

PPAhandle=GetParam(me,'PPAhandle'); %grab PPAhandle object from param
SoundFs=GetParam(me,'SoundFs'); %sampling rate
numChan=getparam(me, 'numChan'); %number of output channels we initialized the soundcard with
nstimchans=min(size(samples)); %number of channels of requested stimulus (i.e. mono or stereo)
samples=reshape(samples, nstimchans, length(samples)); %ensure samples are a row vector
silence=zeros(numChan, length(samples));
silence(1:nstimchans,:)=samples;
samples=silence;

%last channel serves as trigger
trigsamples=zeros(1, length(samples));
triglength=SoundFs/1000; %1 ms trigger

%uncomment this line to make the soundcard trigger last as long as the sound
%for example, if you're using the soundcard trigger to drive an LED pulse
% triglength=length(samples);


trigsamples(1:triglength)=.8*ones(size(1:triglength));
%trigsamples(end-triglength+1:end)=-.5*ones(size(1:triglength));
if loop_flg
    trigsamples=0*trigsamples;
end
samples(numChan,:)=trigsamples;


% we used to add a silent pad at the end to avoid dropouts, but that didn't really work and the problem is now solved differently anyway

SetParam(me,'samples', samples); %store samples for re-buffering if we're looping (used only for looping)

if isfield(param, 'seamless')
    if param.seamless==1
        seamless=param.seamless;
        status = PsychPortAudio('GetStatus', PPAhandle);
        str=sprintf('%s\nPositionSecs=%g\ndur:%g', str, status.PositionSecs, param.duration);
        message(me, str);
        
        if status.Active==0; %device not running, need to start it
            str=sprintf('%s\nhad to start it', str);
            PsychPortAudio('UseSchedule', PPAhandle, 1);
            buf = PsychPortAudio('CreateBuffer', [], samples);
            PsychPortAudio('AddToSchedule', PPAhandle, buf, 1, 0.0, [], []);
            nreps=1;
            when=GetSecs+.01; %mw 032410
            %            when=GetSecs+.1;
            %            when=GetSecs+1;
            PsychPortAudio('Start', PPAhandle,nreps,when,0);
            
        else %already started, just add to schedule
            if status.PositionSecs<.5*param.duration/1000 %less than halfway from start of stimulus
                str=sprintf('%s\npausing', str);
                message(me, str);
                while status.PositionSecs<(.5*param.duration/1000) %let's pause until halfway from start of stimulus
                    status = PsychPortAudio('GetStatus', PPAhandle);
                    pause(.01)
                    str=sprintf('Active=%d,pausing at %g', status.Active, status.PositionSecs);
                    message(me, str);
                end
            end
            str=sprintf('%s\nalready started', str);
            buf = PsychPortAudio('CreateBuffer', [], samples);
            PsychPortAudio('AddToSchedule', PPAhandle, buf, 1, 0.0, [], []);
            %troubleshooting an out-of-memory error with GPIAS 3-2010
            PsychPortAudio('DeleteBuffer',buf, 1);
            
        end
    end
else %this stimulus is not seamless
    PsychPortAudio('UseSchedule', PPAhandle, 0);      %Has no effect unless seamless stimuli were previously delivered, in which case we need to turn scheduling off.
    %above line causes complaint on rig2, works fine commented out.
    %but on rig3 it appears to need the line to transition back to
    %non-seamless stimuli, and causes no complaints. mw 09-11-09
    PsychPortAudio('FillBuffer', PPAhandle, samples); % fill buffer now, start in PlaySound
    
    nreps=0; %0=repeat
    seamless=0;
    %this is a different approach which also works
    %  PsychPortAudio('FillBuffer', PPAhandle, 0*samples); %priming fill and start now, refill in PlaySound
    %  PsychPortAudio('Start', PPAhandle,nreps,0,0);
    
end
SetParam(me,'loop_flg', loop_flg); %store loop flag
SetParam(me,'seamless', seamless); %store whether transition should be seamless or not
message(me, str);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function PlaySound
PPAhandle=GetParam(me,'PPAhandle');
samples=GetParam(me,'samples'); %get samples (simulus vector)
seamless=GetParam(me,'seamless', 'value'); %whether transition should be seamless or not
loop_flg=GetParam(me,'loop_flg', 'value'); %get loop flag

if seamless
    %    do nothing, since sound was added to schedule in LoadPPA
else %not seamless
    %start device here, it was filled in PPALoad
    if loop_flg
        PsychPortAudio('Start', PPAhandle,0,0,0);
        PsychPortAudio('RescheduleStart', PPAhandle,0,0,0);
    else
        nreps=1;
        %when=GetSecs+.1; %this extra latency prevents dropouts somehow
        when=0; %use this to start immediately
        waitForStart=0;
        
        PsychPortAudio('Start', PPAhandle,nreps,when,waitForStart);
        %PsychPortAudio('RefillBuffer', PPAhandle, 0, samples, 0); %this doesn't work
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function InitializeGUI
fig = ModuleFigure(me);
set(fig,'doublebuffer','on','visible','off');

hs = 120;
h = 5;
vs = 50;
n = 1;
% message box
uicontrol('parent',fig,'tag','message','style','text',...
    'enable','inact','horiz','left','pos',[h h hs 2*vs]); n=n+1;
screensize=get(0,'screensize');

uicontrol('parent',fig,'string','Reset','tag','reset','units','normal',...
    'position',[0.02 0.02 0.40 0.20],'enable','on','foregroundcolor',[0.9 0 0],...
    'fontweight','bold',...
    'style','pushbutton','callback',[me ';']);

set(fig,'pos', [screensize(3)-128 screensize(4)-n*vs-100 158 150] ,'visible','on');

Message(me, 'Initialized GUI');
pause(.2)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out=me
% Simple function for getting the name of this m-file.
out=lower(mfilename);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
