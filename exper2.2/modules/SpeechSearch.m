function out=SpeechSearch(varargin)
%SpeechSearch(ACTION,[NAME])
%Module that manages (but does not run) the SpeechSearch algorithm, generates and loads the
%stimulus protocol, and plots the optimization spectrogram
%Loads a "makeSpeechSearchProtocol" .mat file, which is literally just a
%structure that contains the algorithm parameters & file
%locations/descriptive matrices
    %Params: Algorithm Temperature, Convergence Params, # stim per
    %generation, # of times to play each stim, and ISI
%Relies on a structure that contains information about the speech stim,
%generated by "makeSpeechStruct" and loaded with the protocol.


%To do
%Make sure generated stim 'type' is 'speechsearch'
%Make two speech stim protocols at a time, after end of first, feed that to
%algorithm while playing second & computing first, after first is computed,
%generate the next stim protocol. If not ready, generate another using the
%previous params.


global exper pref controltimer

out = [];
if nargin > 0
    action = lower(varargin{1});
else
    action = lower(get(gcbo,'tag'));
end

switch action
    case 'init'
        fig = ModuleFigure(me,'pos',[5 608 128 120]);

        pref.speechdir = [pref.home 'speechStim\'];
        
        %Check whether speech stats matrix is calc'd, asks to calc if not.
        
        

    case 'close'
    case 'load'
    case 'getready'
        %Takes over control from stim manager and loads it
        %Load file into stimulus protocol and play it after the 3 second
        %delay passes
    case 'genend'
        %Message from 
        %keep average time of computation & time of stim, compare and
        %adjust length of stim to be longer than average compute time
        %Check that our convergence params aren't met.
    case 'calcend'
        %Algorithm finished compute, sending back results.
        %redraw spectrogram & algorithm components
        
        
        
%local functions
function computealg
    %Offload compute to alg. module. 


    %Uses similarity matrix and cell responses to weight phuture phonemes
    %to load into future protocols. 

function genspeech
    %Make speech protocol files from the probability matrix given by alg.
function gencomponents
    %Make component sound protocol files
function spikes=getspikes
    %get spikes from open ephys, events from exper, yno all the shit that
    %is done in plotting, then return organized struct by trial
    %keep copy of prev. spikes, only get most recent generation. 





        
        
        
        